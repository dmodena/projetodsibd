CREATE OR REPLACE PACKAGE BODY FUNCIONAMENTO_RESTAURANTE AS
  FUNCTION SEMANA_NUMERO(
      DIA_ATUAL DATE)
  RETURN NUMBER IS
  BEGIN
      RETURN TO_CHAR(DIA_ATUAL, 'D');
  END;
  
  FUNCTION RESTAURANTE_ABERTO(
    HORA_CONSULTA DATE)
  RETURN NUMBER IS
    V_DIA_ABERTO NUMBER(1);
    V_HORA_ABERTURA VARCHAR2(5);
    V_HORA_FECHAMENTO VARCHAR2(5);
    V_ABERTO NUMBER(1) := 0;
  BEGIN
    SELECT EM_FUNCIONAMENTO, HORA_ABERTURA, HORA_FECHAMENTO
    INTO V_DIA_ABERTO, V_HORA_ABERTURA, V_HORA_FECHAMENTO
    FROM HORARIO_FUNCIONAMENTO
    WHERE DIA_SEMANA = SEMANA_NUMERO(HORA_CONSULTA);
  
    IF(V_DIA_ABERTO = '1') THEN
      IF(TO_CHAR(HORA_CONSULTA, 'HH24:MI') BETWEEN V_HORA_ABERTURA AND V_HORA_FECHAMENTO)  THEN
        V_ABERTO := 1;
      END IF;
    END IF;
    RETURN V_ABERTO;
  END;
  
  FUNCTION RESTAURANTE_ABERTO_FERIADO(
    HORA_CONSULTA DATE)
  RETURN NUMBER IS
    V_DIA_ABERTO NUMBER(1);
    V_HORA_ABERTURA VARCHAR2(5);
    V_HORA_FECHAMENTO VARCHAR2(5);
    V_ABERTO NUMBER(1) := 0;
  BEGIN
    SELECT EM_FUNCIONAMENTO, ABERTURA_FERIADO, FECHAMENTO_FERIADO
    INTO V_DIA_ABERTO, V_HORA_ABERTURA, V_HORA_FECHAMENTO
    FROM HORARIO_FUNCIONAMENTO
    WHERE DIA_SEMANA = SEMANA_NUMERO(HORA_CONSULTA);
  
    IF(V_DIA_ABERTO = '1') THEN
      IF(TO_CHAR(HORA_CONSULTA, 'HH24:MI') BETWEEN V_HORA_ABERTURA AND V_HORA_FECHAMENTO)  THEN
        V_ABERTO := 1;
      END IF;
    END IF;
    RETURN V_ABERTO;
  END;
  
  PROCEDURE ADICIONAR_RESERVA(
    COD_CLIENTE CLIENTES.CODIGO%TYPE,
    NRO_MESA NUMBER,
    HORARIO_RESERVA DATE)
  IS
    RESTAURANTE_ABERTO NUMBER(1) := RESTAURANTE_ABERTO(HORARIO_RESERVA);
    RESTAURANTE_ABERTO_FERIADO NUMBER(1) := RESTAURANTE_ABERTO_FERIADO(HORARIO_RESERVA);
    
    COUNT_RESERVA NUMBER;
    COUNT_MESA NUMBER;
    
    INSERT_LISTA_ESPERA EXCEPTION;
    RESTAURANTE_FECHADO EXCEPTION;
    MESA_OCUPADA EXCEPTION;
    
  BEGIN
    IF(RESTAURANTE_ABERTO = 1) THEN
      IF(RESTAURANTE_ABERTO_FERIADO = 1) THEN 
        SELECT COUNT(*) INTO COUNT_RESERVA
        FROM RESERVAS;
          IF(COUNT_RESERVA < 6) THEN
            SELECT COUNT(NUM_MESA) INTO COUNT_MESA
            FROM RESERVAS
            WHERE NUM_MESA = NRO_MESA;
            
            IF(COUNT_MESA = 0) THEN
              INSERT INTO RESERVA
              VALUES(COD_CLIENTE, NRO_MESA, HORARIO_RESERVA);
            ELSE
              RAISE MESA_OCUPADA;
            END IF;
          ELSE
            RAISE INSERT_LISTA_ESPERA;
            
            INSERT INTO LISTA_ESPERA
            VALUES(SYSDATE, COD_CLIENTE, HORARIO_RESERVA);
          END IF;
        END IF;
    ELSE
      RAISE RESTAURANTE_FECHADO;
    END IF;
    
  EXCEPTION
    WHEN INSERT_LISTA_ESPERA THEN
      DBMS_OUTPUT.PUT_LINE('Não há mesas disponíveis. Cliente inserido na lista de espera.');
      
    WHEN RESTAURANTE_FECHADO THEN
      DBMS_OUTPUT.PUT_LINE('O restaurante não abre na data passada.');
      
    WHEN MESA_OCUPADA THEN
      DBMS_OUTPUT.PUT_LINE('A mesa desejada já está ocupada');
  END;

END FUNCIONAMENTO_RESTAURANTE;

CREATE OR REPLACE PACKAGE BODY PEDIDOS AS 
    PROCEDURE ATUALIZAR_ESTOQUE_OPCAO(
    COD_OPCAO OPCOES.CODIGO%TYPE,
    QTD NUMBER
  )
  IS
    V_TIPO VARCHAR2(1);
    
    CURSOR C_CUR IS
      SELECT I.DESCRICAO, I.CODIGO
      FROM ITENS I
      JOIN COMIDA_ITENS CI
        ON CI.COD_ITEM = I.CODIGO
      JOIN COMIDAS C
        ON C.CODIGO = CI.COD_COMIDA
      JOIN OPCOES O
        ON O.CODIGO = C.CODIGO;
        
    CURSOR B_CUR IS
      SELECT I.DESCRICAO, I.CODIGO
      FROM ITENS I
      JOIN BEBIDA_ITENS BI
        ON BI.COD_ITEM = I.CODIGO
      JOIN BEBIDAS B
        ON B.CODIGO = BI.COD_BEBIDA
      JOIN OPCOES O
        ON O.CODIGO = B.CODIGO;
        
    CURSOR P_CUR IS
      SELECT BP.CODIGO
      FROM BEBIDAS_PRONTAS BP
      JOIN OPCOES O
        ON O.CODIGO = BP.CODIGO;
        
    C_RECORD C_CUR%ROWTYPE;
    B_RECORD B_CUR%ROWTYPE;
    P_RECORD P_CUR%ROWTYPE;
  BEGIN
    SELECT TIPO INTO V_TIPO
    FROM OPCOES
    WHERE CODIGO = COD_OPCAO;
    
    IF(V_TIPO = 'P') THEN
      FOR P_RECORD IN P_CUR LOOP
        CONTROLE_ESTOQUE(P_RECORD.CODIGO, QTD);
      END LOOP;
    END IF;
    
    IF(V_TIPO = 'C') THEN
      FOR P_RECORD IN P_CUR LOOP
        CONTROLE_ESTOQUE(C_RECORD.CODIGO, QTD);
      END LOOP;
    END IF;
    
    IF(V_TIPO = 'B') THEN
      FOR P_RECORD IN P_CUR LOOP
        CONTROLE_ESTOQUE(B_RECORD.CODIGO, QTD);
      END LOOP;
    END IF;
  END;
  
  FUNCTION VALOR_OPCAO(
    I_COD_OPCAO OPCOES.CODIGO%TYPE
  )
  RETURN NUMBER IS
    CURSOR CUR_BI IS
      SELECT COD_BEBIDA, COD_ITEM, QUANTIDADE
      FROM BEBIDA_ITENS
      WHERE COD_BEBIDA = I_COD_OPCAO;
    CURSOR CUR_CI IS
      SELECT COD_COMIDA, COD_ITEM, QUANTIDADE
      FROM COMIDA_ITENS
      WHERE COD_COMIDA = I_COD_OPCAO;
    V_VALOR NUMBER(8,2) := 0;
    V_COUNT_OPCOES NUMBER;
    V_OPCAO_TIPO CHAR(1);
    V_PCT_LUCRO NUMBER;
    V_VALOR_ITEM NUMBER;
    OPCAO_INVALIDA EXCEPTION;
  BEGIN
    SELECT COUNT(CODIGO) INTO V_COUNT_OPCOES
    FROM OPCOES
    WHERE CODIGO = I_COD_OPCAO;
  
    IF V_COUNT_OPCOES < 1 THEN
      RAISE OPCAO_INVALIDA;
    END IF;
  
    SELECT TIPO, PCT_LUCRO INTO V_OPCAO_TIPO, V_PCT_LUCRO
    FROM OPCOES
    WHERE CODIGO = I_COD_OPCAO;
  
    CASE V_OPCAO_TIPO
      WHEN 'B' THEN
        FOR R_CUR_BI IN CUR_BI LOOP
          SELECT VALOR * R_CUR_BI.QUANTIDADE INTO V_VALOR_ITEM
          FROM ITENS
          WHERE CODIGO = R_CUR_BI.COD_ITEM;
          V_VALOR := V_VALOR + V_VALOR_ITEM;
        END LOOP;
      WHEN 'C' THEN
        FOR R_CUR_CI IN CUR_CI LOOP
          SELECT VALOR * R_CUR_CI.QUANTIDADE INTO V_VALOR_ITEM
          FROM ITENS
          WHERE CODIGO = R_CUR_CI.COD_ITEM;
          V_VALOR := V_VALOR + V_VALOR_ITEM;
        END LOOP;
      ELSE
        SELECT VALOR INTO V_VALOR_ITEM
        FROM BEBIDAS_PRONTAS
        WHERE CODIGO = I_COD_OPCAO;
        V_VALOR := V_VALOR_ITEM;
    END CASE;
  
    V_VALOR := V_VALOR + (V_VALOR * V_PCT_LUCRO);
  
    RETURN V_VALOR;
  
    EXCEPTION
      WHEN OPCAO_INVALIDA THEN
        DBMS_OUTPUT.PUT_LINE('CÃ³digo de opÃ§Ã£o invÃ¡lido');
        RETURN NULL;
  END;
  
  PROCEDURE ABRIR_COMANDA(
    I_COD_ATENDENTE ATENDENTES.CODIGO%TYPE,
    I_COD_MESA MESAS.NUMERO%TYPE,
    I_QTD_PESSOAS COMANDAS.QTD_PESSOAS%TYPE,
    I_COUVERT COMANDAS.COUVERT%TYPE
  )
  IS
    EX_ATENDENTE_INVALIDO EXCEPTION;
    EX_MESA_INVALIDA EXCEPTION;
    V_COUNT_ATENDENTES NUMBER;
    V_COUNT_MESAS NUMBER;
  BEGIN
    COMMIT;
  
    SELECT COUNT(CODIGO) INTO V_COUNT_ATENDENTES
    FROM ATENDENTES
    WHERE CODIGO = I_COD_ATENDENTE;
  
    IF V_COUNT_ATENDENTES < 1 THEN
      RAISE EX_ATENDENTE_INVALIDO;
    END IF;
  
    SELECT COUNT(NUMERO) INTO V_COUNT_MESAS
    FROM MESAS
    WHERE NUMERO = I_COD_MESA;
  
    IF V_COUNT_MESAS < 1 THEN
      RAISE EX_MESA_INVALIDA;
    END IF;
  
    INSERT INTO COMANDAS (CODIGO, COD_ATENDENTE, COD_MESA, HORA_INICIO, QTD_PESSOAS, COUVERT)
    VALUES (SEQ_COMANDA.NEXTVAL, I_COD_ATENDENTE, I_COD_MESA, SYSDATE, I_QTD_PESSOAS, I_COUVERT);
  
    COMMIT;
    EXCEPTION
      WHEN EX_ATENDENTE_INVALIDO THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('CÃ³digo de Atendente invÃ¡lido');
      WHEN EX_MESA_INVALIDA THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('CÃ³digo de Mesa invalido');
  END;

  PROCEDURE ADICIONAR_OPCAO_COMANDA(
    I_COD_OPCAO OPCOES.CODIGO%TYPE,
    I_COD_COMANDA COMANDAS.CODIGO%TYPE,
    I_QUANTIDADE COMANDA_OPCOES.QUANTIDADE%TYPE
  )
  IS
    EX_QUANTIDADE_INVALIDA EXCEPTION;
    EX_OPCAO_INVALIDA EXCEPTION;
    EX_COMANDA_INVALIDA EXCEPTION;
    V_COUNT_OPCOES NUMBER;
    V_COUNT_COMANDAS NUMBER;
    V_VALOR_OPCAO NUMBER;
  BEGIN
    COMMIT;
  
    IF I_QUANTIDADE < 1 THEN
      RAISE EX_QUANTIDADE_INVALIDA;
    END IF;
  
    SELECT COUNT(CODIGO) INTO V_COUNT_OPCOES
    FROM OPCOES
    WHERE CODIGO = I_COD_OPCAO;
  
    IF V_COUNT_OPCOES < 1 THEN
      RAISE EX_OPCAO_INVALIDA;
    END IF;
  
    SELECT COUNT(CODIGO) INTO V_COUNT_COMANDAS
    FROM COMANDAS
    WHERE CODIGO = I_COD_COMANDA;
  
    IF V_COUNT_COMANDAS < 1 THEN
      RAISE EX_COMANDA_INVALIDA;
    END IF;
  
    SELECT I_QUANTIDADE * VALOR_OPCAO(I_COD_OPCAO) INTO V_VALOR_OPCAO
    FROM DUAL;
  
    INSERT INTO COMANDA_OPCOES (CODIGO, COD_COMANDA, COD_OPCAO, QUANTIDADE)
    VALUES (SEQ_COMANDA_OP.NEXTVAL, I_COD_COMANDA, I_COD_OPCAO, I_QUANTIDADE);
  
    UPDATE COMANDAS
    SET VALOR = VALOR + V_VALOR_OPCAO
    WHERE CODIGO = I_COD_COMANDA;
  
    ATUALIZAR_ESTOQUE_OPCAO(I_COD_OPCAO, I_QUANTIDADE); -- Nesta linha a SP controla o estoque
  
    COMMIT;
    EXCEPTION
      WHEN EX_QUANTIDADE_INVALIDA THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Quantidade invÃ¡lida');
      WHEN EX_OPCAO_INVALIDA THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('CÃ³digo de OpÃ§Ã£o invÃ¡lido');
      WHEN EX_COMANDA_INVALIDA THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('CÃ³digo de comanda invÃ¡lido');
  END;  
  
  PROCEDURE FECHAR_COMANDA(
    I_COD_COMANDA COMANDAS.CODIGO%TYPE,
    I_FORMA_PAGAMENTO COMANDAS.FORMA_PAGAMENTO%TYPE,
    I_OPERADORA COMANDAS.OPERADORA%TYPE
  )
  IS
    EX_COMANDA_INVALIDA EXCEPTION;
    EX_FORMA_PAGTO_INVALIDA EXCEPTION;
    V_COUNT_COMANDAS NUMBER;
  BEGIN
    COMMIT;
  
    SELECT COUNT(CODIGO) INTO V_COUNT_COMANDAS
    FROM COMANDAS
    WHERE CODIGO = I_COD_COMANDA;
  
    IF V_COUNT_COMANDAS < 1 THEN
      RAISE EX_COMANDA_INVALIDA;
    END IF;
  
    IF I_FORMA_PAGAMENTO NOT IN ('C', 'D', 'M') THEN
      RAISE EX_FORMA_PAGTO_INVALIDA;
    END IF;
  
    UPDATE COMANDAS
    SET HORA_FINAL = SYSDATE,
      VALOR = VALOR + COUVERT,
      FORMA_PAGAMENTO = I_FORMA_PAGAMENTO,
      OPERADORA = I_OPERADORA
    WHERE CODIGO = I_COD_COMANDA;
  
    COMMIT;
    EXCEPTION
      WHEN EX_COMANDA_INVALIDA THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('CÃ³digo da Comanda invÃ¡lido');
      WHEN EX_FORMA_PAGTO_INVALIDA THEN
        ROLLBACK;
        DBMS_OUTPUT.PUT_LINE('Forma de pagamento invÃ¡lida');
  END;
END PEDIDOS;